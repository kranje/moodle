{"version":3,"file":"question_bank.min.js","sources":["../src/question_bank.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AMD code for the Question Bank.\n *\n * The question bank dialogue contains all the questions that can be added to the 360 feedback activity.\n * It also serves as the interface where questions can be added, edited, or even removed permanently from the question bank.\n *\n * @module     mod_threesixo/question_bank\n * @class      question_bank\n * @copyright  2016 Jun Pataleta <jun@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as templates from 'core/templates';\nimport * as notification from 'core/notification';\nimport * as ajax from 'core/ajax';\nimport {get_string as getString} from 'core/str';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Pending from 'core/pending';\nimport {notifyItemsUpdated} from \"mod_threesixo/events\";\nimport * as CheckboxToggleAll from 'core/checkbox-toggleall';\n\nconst SELECTORS = {\n    PICK_ALL: '#pick-all',\n    ADD_QUESTION: '#btn-question-bank-add',\n    QUESTION_CHECKBOX: '.question-checkbox',\n    DELETE_QUESTION: '.delete-question-button',\n    EDIT_QUESTION: '.edit-question-button',\n};\n\n// Private variables and functions.\nlet selectedQuestionsOld,\n    selectedQuestions,\n    questions = [],\n    threeSixtyId,\n    questionTypes;\n\n/**\n * Fetches option data for the question type selector.\n *\n * @param {number} selectedId The currently selected question type.\n * @returns {Array}\n */\nfunction getQuestionTypeOptions(selectedId) {\n    const questionTypeOptions = [];\n    // Get question type options.\n    for (const key in questionTypes) {\n        if (!questionTypes.hasOwnProperty(key)) {\n            continue;\n        }\n        const questionType = {\n            typeVal: key,\n            typeName: questionTypes[key]\n        };\n\n        if (typeof selectedId !== 'undefined' && key === selectedId) {\n            questionType.selected = true;\n        }\n\n        questionTypeOptions.push(questionType);\n    }\n\n    return questionTypeOptions;\n}\n\n/**\n * Loops over the list of questions and marks a question as checked if it belongs to the list of selected questions.\n *\n * @param {Object[]} questions The questions to be checked.\n * @returns {Object[]} The list of checked questions.\n */\nfunction checkQuestions(questions) {\n    for (const i in questions) {\n        const question = questions[i];\n        if (selectedQuestions.indexOf(questions[i].id) !== -1) {\n            question.checked = true;\n        }\n    }\n    return questions;\n}\n\n/**\n * Renders the question input dialogue.\n *\n * @param {String} dialogueTitle\n * @param {Object} bodyTemplate\n */\nfunction renderInputDialogue(dialogueTitle, bodyTemplate) {\n    const pendingPromise = new Pending('mod_threesixo/question_input');\n    ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        title: dialogueTitle,\n        body: bodyTemplate,\n        large: true\n    }).then(function(modal) {\n        // Display the dialogue.\n        modal.show();\n\n        modal.getRoot().on(ModalEvents.bodyRendered, function() {\n            // Focus on the question text area.\n            const questionInput = document.getElementById(\"question-input\");\n            if (questionInput) {\n                questionInput.focus();\n            }\n        });\n\n        // On hide handler.\n        modal.getRoot().on(ModalEvents.hidden, function() {\n            // Just destroy the modal.\n            modal.destroy();\n        });\n\n        // On save handler.\n        modal.getRoot().on(ModalEvents.save, () => {\n            const questionInput = document.getElementById(\"question-input\");\n            const question = questionInput.value.trim();\n            // Validate the entered question. Prevent saving if passing an empty question string.\n            if (!question) {\n                question.value = '';\n                const form = questionInput.form;\n                form.classList.add('was-validated');\n                questionInput.classList.add('is-invalid');\n                questionInput.focus();\n                return false;\n            }\n            const qtype = document.getElementById(\"question-type-select\").value;\n            const threesixtyid = document.getElementById(\"threesixtyid\").value;\n\n            const data = {\n                question: question,\n                type: qtype,\n                threesixtyid: threesixtyid,\n            };\n\n            let method = 'mod_threesixo_add_question';\n            const questionId = document.getElementById(\"question-id\").value;\n            if (questionId) {\n                method = 'mod_threesixo_update_question';\n                data.id = questionId;\n            }\n\n            // Refresh the list of questions through AJAX.\n            const promises = ajax.call([\n                {methodname: method, args: data}\n            ]);\n            return promises[0].then(function() {\n                return refreshQuestionsList();\n            }).catch(notification.exception);\n        });\n        return true;\n    }).then(() => {\n        return pendingPromise.resolve();\n    }).catch(notification.exception);\n}\n\n/**\n * Function that displays the input dialogue.\n *\n * @param {Number} threesixtyId The 360 instance ID.\n * @param {Number} questionId The question ID.\n */\nconst displayInputDialogue = function(threesixtyId, questionId) {\n    getString('addanewquestion', 'mod_threesixo').then(function(title) {\n        const data = {\n            threesixtyid: threesixtyId\n        };\n\n        if (questionId) {\n            data.questionid = questionId;\n            for (const i in questions) {\n                const question = questions[i];\n                if (question.id === questionId) {\n                    data.question = question.question;\n                    data.type = question.type;\n                    break;\n                }\n            }\n        }\n\n        data.questionTypes = getQuestionTypeOptions(data.type);\n        const body = templates.render('mod_threesixo/item_edit', data);\n        return renderInputDialogue(title, body);\n    }).catch(notification.exception);\n};\n\n/**\n * Displays the question bank dialogue.\n * @param {string} title\n * @param {Promise} questionBankTemplate\n */\nfunction displayQuestionBankDialogue(title, questionBankTemplate) {\n    const pendingPromise = new Pending('mod_threesixo/question_bank');\n\n    ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        title: title,\n        body: questionBankTemplate,\n        large: true\n    }).then(function(modal) {\n        const modalRoot = modal.getRoot();\n\n        // On hide handler.\n        modalRoot.on(ModalEvents.hidden, function() {\n            // Empty modal contents when it's hidden.\n            modal.destroy();\n        });\n\n        modalRoot.on(ModalEvents.save, function() {\n            let changed = false;\n            // Check if the new selected questions exist in the old selected questions.\n            selectedQuestionsOld.forEach(questionId => {\n                if (selectedQuestions.indexOf(questionId) === -1) {\n                    changed = true;\n                }\n            });\n            // Conversely, if the newly selected items seem to have not changed,\n            // check if the old selected questions exist in the new selected questions.\n            if (!changed) {\n                selectedQuestions.forEach(questionId => {\n                    if (selectedQuestionsOld.indexOf(questionId) === -1) {\n                        changed = true;\n                    }\n                });\n            }\n\n            if (changed) {\n                const data = {\n                    threesixtyid: threeSixtyId,\n                    questionids: selectedQuestions\n                };\n\n                // Save the selected questions.\n                const promises = ajax.call([\n                    {methodname: 'mod_threesixo_set_items', args: data}\n                ]);\n                // Refresh the list of questions through AJAX.\n                promises[0].then(function() {\n                    return notifyItemsUpdated(threeSixtyId);\n                }).catch(notification.exception);\n            } else {\n                // Nothing changed in the selection, but it's possible that the question texts have been updated.\n                // So better to refresh the list as well.\n                notifyItemsUpdated(threeSixtyId);\n            }\n        });\n\n        // Display the dialogue.\n        return modal.show();\n    }).then(() => {\n        return pendingPromise.resolve();\n    }).catch(notification.exception);\n}\n\n/**\n * Adds/removes a question from the array of selected questions depending on its selection state.\n *\n * @param {number} questionId\n * @param {boolean} isSelected\n */\nconst updateItemSelection = (questionId, isSelected) => {\n    if (isSelected) {\n        const index = selectedQuestions.indexOf(questionId);\n        if (index === -1) {\n            // Add the question ID if it's not yet present.\n            selectedQuestions.push(questionId);\n        }\n    } else {\n        const index = selectedQuestions.indexOf(questionId);\n        if (index > -1) {\n            // Remove the question ID only if it's present.\n            selectedQuestions.splice(index, 1);\n        }\n    }\n};\n\n/**\n * Binds the event listeners to question items such as edit, delete, checking.\n */\nconst registerEvents = function() {\n    document.addEventListener('click', (e) => {\n        if (e.target.closest(SELECTORS.PICK_ALL)) {\n            const questionCheckboxes = document.querySelectorAll(SELECTORS.QUESTION_CHECKBOX);\n            questionCheckboxes.forEach(checkbox => {\n                const questionId = parseInt(checkbox.dataset.questionid);\n                updateItemSelection(questionId, checkbox.checked);\n            });\n        } else if (e.target.closest(SELECTORS.QUESTION_CHECKBOX)) {\n            const questionCheckbox = e.target.closest(SELECTORS.QUESTION_CHECKBOX);\n            const questionId = parseInt(questionCheckbox.dataset.questionid);\n\n            updateItemSelection(questionId, questionCheckbox.checked);\n        } else if (e.target.closest(SELECTORS.EDIT_QUESTION)) {\n            e.preventDefault();\n\n            const editQuestionButton = e.target.closest(SELECTORS.EDIT_QUESTION);\n            const threesixtyId = parseInt(editQuestionButton.dataset.threesixtyid);\n            const questionId = parseInt(editQuestionButton.dataset.questionid);\n            displayInputDialogue(threesixtyId, questionId);\n        } else if (e.target.closest(SELECTORS.DELETE_QUESTION)) {\n            e.preventDefault();\n\n            const deleteButton = e.target.closest(SELECTORS.DELETE_QUESTION);\n            const threesixtyId = deleteButton.dataset.threesixtyid;\n            const questionId = deleteButton.dataset.questionid;\n            handleDeletion(questionId, threesixtyId);\n        } else if (e.target.closest(SELECTORS.ADD_QUESTION)) {\n            e.preventDefault();\n\n            const addButton = e.target.closest(SELECTORS.ADD_QUESTION);\n            const id = addButton.dataset.threesixtyid;\n            displayInputDialogue(id, null);\n        }\n    });\n};\n\n/**\n * Refreshes the list of questions in the question bank.\n */\nfunction refreshQuestionsList() {\n    // Get list of questions through AJAX.\n    const promises = ajax.call([\n        {\n            methodname: 'mod_threesixo_get_questions',\n            args: {}\n        }\n    ]);\n    promises[0].then(response => {\n        questions = response.questions;\n        const data = {\n            pickerMode: threeSixtyId,\n            questions: checkQuestions(questions)\n        };\n\n        return templates.render('mod_threesixo/question_list', data);\n    }).then(compiledSource => {\n        const questionListWrapper = document.querySelector(\"#questionListWrapper\");\n        if (questionListWrapper) {\n            questionListWrapper.innerHTML = compiledSource;\n        }\n        return null;\n    }).catch(notification.exception);\n}\n\n/**\n * Handles item deletion.\n *\n * @param {Number} questionId The question ID.\n * @param {Number} threesixtyId The 360 instance ID.\n */\nfunction handleDeletion(questionId, threesixtyId) {\n    getString('deletequestion', 'mod_threesixo').then(function(title) {\n        return ModalFactory.create({\n            title: title,\n            body: getString('confirmquestiondeletion', 'mod_threesixo'),\n            type: ModalFactory.types.SAVE_CANCEL\n        });\n    }).then(function(modal) {\n        modal.getRoot().on(ModalEvents.save, function() {\n            // Get list of questions through AJAX.\n            const promises = ajax.call([\n                {\n                    methodname: 'mod_threesixo_delete_question',\n                    args: {\n                        id: questionId,\n                        threesixtyid: threesixtyId,\n                    }\n                }\n            ]);\n            promises[0].then(function() {\n                return refreshQuestionsList();\n            }).catch(notification.exception);\n        });\n\n        modal.getRoot().on(ModalEvents.hidden, () => {\n            modal.destroy();\n        });\n\n        return modal.show();\n    }).catch(notification.exception);\n}\n\n\n/**\n * Create the context and render the question  bank template.\n */\nfunction renderQuestionBank() {\n    // Template context.\n    const context = {pickerMode: threeSixtyId};\n\n    // Render the question list.\n    const promises = ajax.call([\n        {\n            methodname: 'mod_threesixo_get_questions',\n            args: {}\n        }\n    ]);\n    promises[0].then(function(response) {\n        questions = response.questions;\n        context.questions = checkQuestions(questions);\n\n        // Render the template and display the comment chooser dialog.\n        return templates.render('mod_threesixo/question_bank', context);\n    }).then(questionBankTemplate => {\n        return getString('labelpickfromquestionbank', 'mod_threesixo').then(title => {\n            return displayQuestionBankDialogue(title, questionBankTemplate);\n        });\n    }).then(() => {\n        if (threeSixtyId) {\n            CheckboxToggleAll.init();\n        }\n        return true;\n    }).catch(notification.exception);\n}\n\nconst questionBankInit = function(id) {\n    threeSixtyId = id;\n\n    const methodCalls = [\n        {\n            methodname: 'mod_threesixo_get_question_types',\n            args: {}\n        }\n    ];\n\n    if (threeSixtyId) {\n        // Get selected items for the 360-degree feedback.\n        methodCalls.push({\n            methodname: 'mod_threesixo_get_items',\n            args: {\n                threesixtyid: threeSixtyId\n            }\n        });\n    }\n\n    // Get list of questions through AJAX.\n    const promises = ajax.call(methodCalls);\n    promises[0].then(function(response) {\n        questionTypes = response.questiontypes;\n        if (threeSixtyId) {\n            return promises[1];\n        }\n        renderQuestionBank();\n        return null;\n    }).then(response => {\n        if (response === null) {\n            return false;\n        }\n        selectedQuestions = [];\n        selectedQuestionsOld = [];\n        const items = response.items;\n        for (const i in items) {\n            if (!items.hasOwnProperty(i)) {\n                continue;\n            }\n            selectedQuestions.push(items[i].questionid);\n            // Store originally selected question IDs for comparison later.\n            selectedQuestionsOld.push(items[i].questionid);\n        }\n        renderQuestionBank();\n        return true;\n    }).catch(notification.exception);\n\n    registerEvents();\n};\n\n/** @alias module:mod_threesixo/question_bank */\nexport default {\n    init: questionBankInit,\n};\n"],"names":["SELECTORS","selectedQuestionsOld","selectedQuestions","threeSixtyId","questionTypes","questions","checkQuestions","i","question","indexOf","id","checked","displayInputDialogue","threesixtyId","questionId","then","title","data","threesixtyid","questionid","type","selectedId","questionTypeOptions","key","hasOwnProperty","questionType","typeVal","typeName","selected","push","getQuestionTypeOptions","dialogueTitle","bodyTemplate","pendingPromise","Pending","create","ModalFactory","types","SAVE_CANCEL","body","large","modal","show","getRoot","on","ModalEvents","bodyRendered","questionInput","document","getElementById","focus","hidden","destroy","save","value","trim","form","classList","add","method","ajax","call","methodname","args","refreshQuestionsList","catch","notification","exception","resolve","renderInputDialogue","templates","render","updateItemSelection","isSelected","index","splice","registerEvents","addEventListener","e","target","closest","querySelectorAll","forEach","checkbox","parseInt","dataset","questionCheckbox","preventDefault","editQuestionButton","deleteButton","handleDeletion","response","pickerMode","compiledSource","questionListWrapper","querySelector","innerHTML","renderQuestionBank","context","questionBankTemplate","modalRoot","changed","questionids","displayQuestionBankDialogue","CheckboxToggleAll","init","methodCalls","promises","questiontypes","items"],"mappings":"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"}