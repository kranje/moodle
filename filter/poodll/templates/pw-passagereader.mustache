<button type='button' id='{{AUTOID}}' data-currentsentence="0" class="roundmini-audio-player" >
    <audio id='{{AUTOID}}_player' class="roundminiaudio nomediaplugin">
    </audio>
    <i class="fa fa-volume-up" aria-hidden="true"></i>
</button>

{{#js}}
    //<script>
 require(['jquery','core/log', 'filter_poodll/pollyhelper'], function($, log, pollyhelper) {

    var wordselector = '#{{AUTOID}}_textblock span.tbr_word';
    var sentenceselector = '#{{AUTOID}}_textblock span.tbr_sentence';

    var pr = {
        voice: 'Amy',
        usetext: '',
        sentences: [],
        thesentence_number: 0,
        lettered: false,
        theplayer: false,
        textblock:  [],
        itemid: '',
        fa: [],
        pollyhelper: false,

        init: function() {
            // Moodle seems to run the JS twice so we just ignore it if its the second run (otherwise the event handlers register twice etc).
            this.theplayer = $('#{{AUTOID}}_player');
            if (this.theplayer.attr('data-init')==='done'){
                return;
            } else {
                //get the DOM elements we need to work with
                this.itemid = "{{AUTOID}}";
                this.textblock = $('#{{AUTOID}}_textblock');
                this.fa = $('#{{AUTOID}} .fa');
                this.theplayer.attr('data-init','done');

                //set up passage reader specific stuff
                this.passage_reader();

                //set up our event handlers
                this.register_events();
                //set up Polly URLs, sentence naviagation and highlighting on the passage
                //we clone pollyhelper so that multiple instances of the reader can run at once
                //AMD modules share the instances they declare in the module, so we need to clone
                //or they would all play the passage for the finally declared reader instance
                this.pollyhelper = pollyhelper.clone();
                this.pollyhelper.init(this.theplayer,this.itemid, this.textblock, this.voice,sentenceselector,wordselector,'{{highlightmode}}', '{{CLOUDPOODLLTOKEN}}');
                this.sentences = $(sentenceselector);
            }
        },


        passage_reader: function(){

            // Fetch the text to read.
            this.usetext = this.textblock.text();

            // If its right to left we need to massage it a bit.
            switch("{{language}}"){
                case 'Arabic':
                case 'Hebrew':
                case 'Farsi':
                    this.textblock.addClass('filter_poodll_passageplayer_rtl');
                    $(this.textblock).find('p').removeAttr('dir');
            }

            // Determine the voice.
            var mf = "{{speaker}}";
            switch("{{language}}"){
                case "English(US)": voice = mf=='Male'?'Joey':'Kendra';break;
                case "English(GB)": voice = mf=='Male'?'Brian':'Amy';break;
                case "English(AU)": voice = mf=='Male'?'Russell':'Nicole';break;
                case "English(IN)": voice = mf=='Male'?'Aditi':'Raveena';break;
                case "English(WELSH)": voice = mf=='Male'? 'Geraint':'Geraint';break;
                case "Arabic": voice = mf=='Male'?'ar-XA-Wavenet-B':'Zeina';break;
                case "Danish": voice = mf=='Male'?'Mads':'Naja';break;
                case "Dutch": voice = mf=='Male'?'Ruben':'Lotte';break;
                case "Dutch(BE)": voice = mf=='Male'?'nl-BE-Wavenet-B':'nl-BE-Wavenet-A';break;
                case "French(FR)": voice = mf=='Male'?'Mathieu':'Celine';break;
                case "French(CA)": voice = mf=='Male'?'Chantal':'Chantal';break;
                case "German": voice = mf=='Male'?'Hans':'Marlene';break;
                case "Hebrew": voice = mf=='Male'?'he-IL-Wavenet-B':'he-IL-Wavenet-A';break;
                case "Icelandic": voice = mf=='Male'?'Karl':'Dora';break;
                case "Italian": voice = mf=='Male'?'Carla':'Giorgio';break;
                case "Japanese": voice = mf=='Male'?'Takumi':'Mizuki';break;
                case "Korean": voice = mf=='Male'?'Seoyan':'Seoyan';break;
                case "Norwegian": voice = mf=='Male'?'Liv':'Liv';break;
                case "Polish": voice = mf=='Male'?'Jacek':'Ewa';break;
                case "Portugese(BR)": voice = mf=='Male'?'Ricardo':'Vitoria';break;
                case "Portugese(PT)": voice = mf=='Male'?'Cristiano':'Ines';break;
                case "Romanian": voice = mf=='Male'?'Carmen':'Carmen';break;
                case "Russian": voice = mf=='Male'?'Maxim':'Tatyana';break;
                case "Spanish(ES)": voice = mf=='Male'?'Enrique':'Conchita';break;
                case "Spanish(US)": voice = mf=='Male'?'Miguel':'Penelope';break;
                case "Swedish": voice = mf=='Male'?'Astrid':'Astrid';break;
                case "Turkish": voice = mf=='Male'?'Filiz':'Filiz';break;
                case "Welsh": voice = mf=='Male'?'Gwyneth':'Gwyneth';break;
                default: voice = mf=='Male'?'Brian':'Amy';
            }

        },

        register_events: function() {
            var that = this;
            /*
            *
            * AUDIO PLAYER events.
            *
            */
            that.theplayer[0].addEventListener('ended', function () {
                if (that.thesentence_number < that.sentences.length - 1) {
                    that.thesentence_number++;
                    that.pollyhelper.doplayaudio(that.thesentence_number);
                } else {
                    that.pollyhelper.dehighlight_all();
                    $(that.fa).removeClass('fa-stop');
                    $(that.fa).addClass('fa-volume-up');
                    that.thesentence_number = 0;
                    that.theplayer.removeAttr('src');
                }
            });

            // Handle audio player button clicks.
            $('#' + that.itemid).click(function () {
                if (!that.theplayer[0].paused && !that.theplayer[0].ended) {
                    that.theplayer[0].pause();
                    if ("{{stoporpause}}" == 'stop') {
                        that.thesentence_number = 0;
                    }
                    $(that.fa).removeClass('fa-stop');
                    $(that.fa).addClass('fa-volume-up');

                    // If paused and not in limbo no src state.
                } else if (that.theplayer[0].paused && that.theplayer.attr('src')) {
                    that.pollyhelper.doplayaudio(that.thesentence_number);
                    $(that.fa).removeClass('fa-volume-up');
                    $(that.fa).addClass('fa-stop');
                    // Play.
                } else {
                    log.debug("stoporpause: " + "{{stoporpause}}");
                    if ("{{stoporpause}}" == 'stop') {
                        that.thesentence_number = 0;
                    }
                    that.pollyhelper.doplayaudio(that.thesentence_number);
                    $(that.fa).removeClass('fa-volume-up');
                    $(that.fa).addClass('fa-stop');
                } // End of if paused ended.
            });

            // Handle sentence clicks.
            $('#' + that.itemid + '_textblock  .tbr_innerdiv').on('click', '.tbr_sentence', function () {
                that.theplayer[0].pause();
                var sentenceindex = $(this).attr('data-sentenceindex');
                $(that.fa).removeClass('fa-volume-up');
                $(that.fa).addClass('fa-stop');
                that.thesentence_number = sentenceindex;
                that.pollyhelper.doplayaudio(sentenceindex);
            });
        }//end of register events
    };
    pr.init();
});
{{/js}}